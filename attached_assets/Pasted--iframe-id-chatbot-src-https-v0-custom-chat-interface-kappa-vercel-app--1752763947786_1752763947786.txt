
<iframe
        id="chatbot"
        src="https://v0-custom-chat-interface-kappa.vercel.app"
        style="position: fixed; bottom: 24px; right: 24px; width: 450px; height: 800px; border: none; z-index: 9999; overflow: hidden; border-radius: 1rem;"
        allow="microphone"
        title="Chatbot Widget"
      ></iframe>
    
    {%- endunless -%}

<script>
  (function () {
    "use strict";

    console.log("[Shopify Theme] Initializing chatbot system…");

    // --- Helper function to read cookies ---
    function getCookie(name) {
      const m = document.cookie.match(new RegExp('(?:^|; )' + name + '=([^;]*)'));
      return m ? decodeURIComponent(m[1]) : null;
    }

    // --- Helper to determine a consistent session ID ---
    function getShopifySession() {
      const cookieY = getCookie('_shopify_y');
      if (cookieY) return cookieY;

      const cookieS = getCookie('_shopify_s');
      if (cookieS) return cookieS;

      let fallback = localStorage.getItem('bot_session_id');
      if (!fallback) {
        fallback = crypto.randomUUID();
        localStorage.setItem('bot_session_id', fallback);
      }
      return fallback;
    }
    
    const sessionId = getShopifySession();
    console.log("[Chatbot] Determined session_id:", sessionId);

    // --- The origin of your chatbot iframe ---
    const chatbotOrigin = "https://v0-custom-chat-interface-kappa.vercel.app";

    // --- Listen for messages coming FROM the iframe (e.g., add-to-cart, conversation requests) ---
    window.addEventListener("message", function (event) {
      // ✅ FIX: Only accept messages from the trusted chatbot iframe origin.
      // This prevents the listener from reacting to other scripts or its own page events.
      if (event.origin !== chatbotOrigin) {
        // This is not a message from our chatbot, so we safely ignore it.
        return;
      }

      // We have a trusted message, now process it.
      const { type, payload } = event.data || {};
      console.log("[Shopify Theme] Received message from iframe:", type, payload);

      // Handle conversation list requests
      if (type === "get-conversations") {
        fetchConversations(sessionId)
          .then(conversations => {
            iframe.contentWindow.postMessage({
              type: "conversations-response",
              conversations: conversations
            }, chatbotOrigin);
          })
          .catch(err => {
            console.error("[Shopify Theme] Failed to fetch conversations:", err);
            // Send empty conversations array as fallback
            iframe.contentWindow.postMessage({
              type: "conversations-response",
              conversations: []
            }, chatbotOrigin);
          });
      }

      // Handle conversation history requests
      if (type === "get-conversation-history" && payload?.conversationId) {
        fetchConversationHistory(payload.conversationId, sessionId)
          .then(history => {
            iframe.contentWindow.postMessage({
              type: "conversation-history-response",
              conversationId: payload.conversationId,
              history: history
            }, chatbotOrigin);
          })
          .catch(err => {
            console.error("[Shopify Theme] Failed to fetch conversation history:", err);
            // Send empty history as fallback
            iframe.contentWindow.postMessage({
              type: "conversation-history-response",
              conversationId: payload.conversationId,
              history: []
            }, chatbotOrigin);
          });
      }

      // This listener is now only for events that must be handled by the parent page.
      if (type === "add-to-cart" && payload) {
        const { variantId, quantity = 1, redirect = false } = payload;
        console.log(`[Shopify Theme] add-to-cart ${variantId} x${quantity}`);

        addItemToCart(variantId, quantity, sessionId)
          .then(() => fetch("/cart.js")).then(r => r.json())
          .then(cart => {
            const hasBotItem = cart.items.some(i => i.properties?._chatbot_session_id === sessionId);
            const attrs = hasBotItem ? { chatbot_session_id: sessionId, chatbot_source: "true" } : { chatbot_session_id: "", chatbot_source: "" };
            return fetch("/cart/update.js", { method: "POST", headers: { "Content-Type": "application/json", Accept: "application/json" }, body: JSON.stringify({ attributes: attrs }) });
          })
          .then(r => { if (!r.ok) throw new Error(r.status); return r.json(); })
          .then(cart => {
            updateCartUI(cart);
            showCartSuccess("Item added via chatbot!");
            if (redirect) setTimeout(() => location.href = "/cart", 1000);
          })
          .catch(err => {
            console.error("[Shopify Theme] Cart error:", err);
            showCartError("Failed to add item — please try again.");
          });
      }
    });

    // --- Iframe Initialization: Send data TO the iframe ---
    let iframe; // Store iframe reference for conversation requests
    
    document.addEventListener("DOMContentLoaded", () => {
      iframe = document.getElementById("chatbot");
      if (!iframe) {
        console.error("[Shopify Theme] Chatbot iframe not found.");
        return;
      }

      const initPayload = {
        type: "init",
        session_id: sessionId,
        source_url: window.location.href,
        page_context: document.title,
        cart_currency: getCookie("cart_currency"),
        localization: getCookie("localization")
      };

      // Send the init data once the iframe has loaded.
      iframe.addEventListener('load', () => {
        iframe.contentWindow.postMessage(
          initPayload,
          chatbotOrigin // Target the message specifically to the chatbot's origin
        );
        console.log("[Shopify Theme] Sent init data to chatbot iframe:", initPayload);
      });
    });

    // --- Helper functions for conversation management ---
    function fetchConversations(sessionId) {
      return fetch(`${chatbotOrigin}/api/conversations?session_id=${encodeURIComponent(sessionId)}`, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
          "Accept": "application/json"
        }
      })
      .then(r => {
        if (!r.ok) throw new Error(`Failed to fetch conversations: ${r.status}`);
        return r.json();
      });
    }

    function fetchConversationHistory(conversationId, sessionId) {
      return fetch(`${chatbotOrigin}/api/conversations/${conversationId}?session_id=${encodeURIComponent(sessionId)}`, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
          "Accept": "application/json"
        }
      })
      .then(r => {
        if (!r.ok) throw new Error(`Failed to fetch conversation history: ${r.status}`);
        return r.json();
      });
    }

    // --- Helper functions for cart interactions and notifications ---
    function addItemToCart(variantId, quantity, sessionId) {
      return fetch("/cart/add.js", {
        method: "POST",
        headers: { "Content-Type": "application/json", Accept: "application/json" },
        body: JSON.stringify({
          id: variantId,
          quantity: quantity,
          properties: { _chatbot_session_id: sessionId }
        })
      }).then(r => { if (!r.ok) throw new Error(r.status); return r.json(); });
    }

    function updateCartUI(cart) {
      document.querySelectorAll(".cart-count, [data-cart-count], .cart-item-count")
        .forEach(el => {
          el.textContent = cart.item_count;
          el.style.display = cart.item_count > 0 ? "inline" : "none";
        });
    }

    function showCartSuccess(msg) { showNotification(msg, "#4CAF50", "#45a049"); }
    function showCartError(msg)   { showNotification(msg, "#f44336", "#d32f2f"); }

    function showNotification(message, from, to) {
      const n = document.createElement("div");
      n.className = "cart-notification";
      n.innerHTML = `
        <div style="display:flex;align-items:center;gap:8px;">
          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M20 6L9 17l-5-5"/>
          </svg>
          <span>${message}</span>
        </div>`;
      Object.assign(n.style, {
        position: "fixed", top: "20px", right: "20px",
        background: `linear-gradient(135deg,${from},${to})`,
        color: "#fff", padding: "12px 16px", borderRadius: "8px",
        zIndex: 10000, fontFamily: "sans-serif",
        animation: "slideInRight 0.3s ease-out"
      });
      if (!document.querySelector("#notif-styles")) {
        const s = document.createElement("style");
        s.id = "notif-styles";
        s.textContent = `
          @keyframes slideInRight { from{transform:translateX(100%);opacity:0}to{transform:translateX(0);opacity:1} }
          @keyframes slideOutRight { from{opacity:1}to{transform:translateX(100%);opacity:0} }
        `;
        document.head.appendChild(s);
      }
      document.body.appendChild(n);
      setTimeout(() => {
        n.style.animation = "slideOutRight 0.3s ease-in forwards";
        setTimeout(() => n.remove(), 300);
      }, 3000);
    }

    console.log("[Shopify Theme] Chatbot system initialized.");
  })();
</script>
